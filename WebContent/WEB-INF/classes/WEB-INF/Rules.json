[{
    "description": "This rule is designed to detect individual who could be financially unstable",
    "name": "Claimant Earnings Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.* import com.claimvantage.rules.Setting global com.claimvantage.rules.Setting claimantEarningSettings  rule 'Contact Earnings Rule' when Contact($ContactId : id, cve__Earnings__c == null); $Claim : Cve__Claim__c($ClaimId : id, cve__ClaimantInsured__c == $ContactId); then insert(new Alert(drools.getRule().getName(), claimantEarningSettings.getScore(), claimantEarningSettings.getRecommendation() ) ); end",
	"consequence":{"score":100, "recommendation":"Contact Claimant to ensure financial stability"},
	"setting":{
		"score":100, 
		"recommendation":"Contact Claimant to ensure financial stability", 
		"configHint": "",
		"category": "Claimant",
		"name": "Claimant Earnings Rule"
	},
	"global": "claimantEarningSettings"
},
{
    "description": "The Missing Address Rule should detect claimants who are acting shady and supplying little personal information",
    "name": "Claimant Missing Address Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.* import com.claimvantage.rules.Setting global com.claimvantage.rules.Setting claimantMissingAddressSettings rule 'Contact Missing Address Rule' when Contact($ContactId : id, cve__MailingAddress__c == null, OtherAddress == null); $Claim : Cve__Claim__c($ClaimId : id, cve__ClaimantInsured__c == $ContactId); then insert(new Alert(drools.getRule().getName(), claimantMissingAddressSettings.getScore(), claimantMissingAddressSettings.getRecommendation())); end",
	"consequence":{"score":100, "recommendation":"Check Claimant details and get an address on record"},
	"setting":{
		"score":100, 
		"recommendation":"Check Claimant details and get an address on record",
		"configHint": "",
		"category": "Claimant",
		"name": "Claimant Missing Address Rule"
		},
	"global": "claimantMissingAddressSettings"
},
{
    "description": "The Claimant has been flagged in the system for having history of fraudulent activity",
    "name": "Claimant Has Fraudulent History Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting claimantBadHistorySettings rule 'Claimant Has Fraudulent History Rule' when Contact($ContactId : id, ConvictedFraudster__c == true); Cve__Claim__c ($ClaimId : id, cve__ClaimantInsured__c == $ContactId , RuleUtil.isClaimOpen(cve__Status__c)) then insert( new Alert(drools.getRule().getName(), claimantBadHistorySettings.getScore(), claimantBadHistorySettings.getRecommendation(), $ClaimId)); end",
	"consequence": {"score":100, "recommendation":"Investigate the claimant on record "},
	"setting":{
		"score":100, 
		"recommendation":"Investigate the claimant on record",
		"configHint": "",
		"category": "Claimant",
		"name": "Claimant Has Fraudulent History Rule"
		},
	"global": "claimantBadHistorySettings"
},
{
    "description": "The Missing Documents Rule should detect any claim that is missing any kind of required correspondence",
    "name": "Missing Multiple Documents Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.Setting global com.claimvantage.rules.Setting missingDocumentSettings rule 'Missing Multiple Documents Rule' when Cve__Claim__c($ClaimId : id); Cve__Document__c(cve__Claim__c == $ClaimId, cve__Required__c == true, cve__Received__c == null, cve__Accepted__c == false, cve__Type__c == 'Medical'); then insert(new Alert(drools.getRule().getName(), missingDocumentSettings.getScore() , missingDocumentSettings.getRecommendation() )); end",
	"consequence": {"score":100, "recommendation":"Contact Claim to follow up on missing documents"},
	"setting":{
		"score":100, 
		"recommendation":"Contact Claim to follow up on missing documents",
		"configHint": "",
		"category": "Missing Multiple Documents Rule",
		"name": "Claimant Has Fraudulent History Rule"
		},
	"global": "missingDocumentSettings"
},
{
    "description": "The Missing Medical Documents Rule should detect any claim that is missing any kind of medical correspondence",
    "name": "Missing Medical Documents Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.* import com.claimvantage.rules.Setting global com.claimvantage.rules.Setting missingMedicalDocumentsSettings rule 'Missing Medical Documents Rule' when Cve__Claim__c($ClaimId : id); Cve__Document__c(cve__Claim__c == $ClaimId, cve__Required__c == true, cve__Received__c == null, cve__Accepted__c == false, cve__Type__c == 'Medical'); then insert(new Alert(drools.getRule().getName(), missingMedicalDocumentsSettings.getScore(), missingMedicalDocumentsSettings.getRecommendation())); end",
	"consequence": {"score":50, "recommendation":"Contact Claim to follow up on missing documents"},
	"setting":{
		"score":50, 
		"recommendation":"Contact Claim to follow up on missing documents",
		"configHint": "",
		"category": "Claimant",
		"name": "Missing Medical Documents Rule"
		},
	"global": "missingMedicalDocumentsSettings"
},
{
    "description": "The Missing Accident Report looks for accident claims and ensures that there is a accident report on the claim",
    "name": "Missing Accident Report Rule",
    "script": " package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting missingAccidentReportSettings rule 'Missing Accident Report Rule' when Cve__Claim__c($ClaimId : id); Cve__BenefitClaimed__c(cve__Claim__c == $ClaimId, cve__Cause__c == 'Accident'); Cve__Document__c(cve__Claim__c == $ClaimId, cve__Accepted__c == false, cve__Type__c == 'Accident Report') then insert( new Alert(drools.getRule().getName(), missingAccidentReportSettings.getScore(), missingAccidentReportSettings.getRecommendation(), $ClaimId )); end",
	"consequence": {"score":100, "recommendation":" Contact Claimant to gather Accident Report "},
	"setting":{
		"score":100, 
		"recommendation":" Contact Claimant to gather Accident Report",
		"configHint": "",
		"category": "Claimant",
		"name": "Missing Accident Report Rule"
		},
	"global": "missingAccidentReportSettings"
},
{
    "description": "The Missing Physician rule detects if there is a claim that has no attending Physician ",
    "name": "Missing Physician Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.* import java.util.ArrayList import com.claimvantage.rules.Setting global com.claimvantage.rules.Setting missingPhysicianSettings rule 'Missing Physician Rule' when Cve__Claim__c($ClaimId : id); $AttendingPhysicans : ArrayList(size == 0)  from collect( Cve__ClaimRelationship__c( cve__Claim__c == $ClaimId, cve__Type__c == 'Attending Physician'))then insert(new Alert(drools.getRule().getName(), missingPhysicianSettings.getScore(), missingPhysicianSettings.getRecommendation() )); end",
	"consequence": {"score":100, "recommendation":"Investigate the Claimants Medical Claim"},
	"setting":{
		"score":100, 
		"recommendation":"Investigate the Claimants Medical Claim",
		"configHint": "",
		"category": "Physician",
		"name": "Missing Physician Rule"
		},
	"global": "missingPhysicianSettings"
},
{
    "description": "The Physician does not have an address on file, this could indicate that the Physician could be suspicious",
    "name": "Physician Missing Address Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting missingPhysicianAddressSettings rule 'Physician Missing Address Rule' when Contact($ContactId : id, cve__MailingAddress__c == null, OtherAddress == null) Cve__Claim__c($ClaimId : id) Cve__ClaimRelationship__c(cve__Claim__c == $ClaimId, cve__Type__c == 'Attending Physician', cve__Contact__c == $ContactId) then insert( new Alert(drools.getRule().getName(), missingPhysicianAddressSettings.getScore(),missingPhysicianAddressSettings.getRecommendation() ,$ClaimId)); end ",
	"consequence": {"score":100, "recommendation":"Investigate the physician on record "},
	"setting":{
		"score":100, "recommendation":"Investigate the physician on record",
		"configHint": "",
		"category": "Physician",
		"name": "Physician Missing Address Rule"
		},
	"global": "missingPhysicianAddressSettings"
},
{
    "description": "The Physician does not have a valid address on file, this could indicate that the Physician could be suspicious",
    "name": "Physician Invalid Address Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting invalidPhysicianAddressSettings rule 'Physician Invalid Address Rule' when Contact($ContactId : id, InvalidAddress__c == true) Cve__Claim__c($ClaimId : id) Cve__ClaimRelationship__c( cve__Claim__c == $ClaimId, cve__Contact__c == $ContactId, cve__Type__c == 'Attending Physician') then insert( new Alert(drools.getRule().getName(), invalidPhysicianAddressSettings.getScore() , invalidPhysicianAddressSettings.getRecommendation(), $ClaimId)); end",
	"consequence": {"score":100, "recommendation":"Investigate the physician on record "},
	"setting":{
		"score":100, 
		"recommendation":"Investigate the physician on record",
		"configHint": "",
		"category": "Physician",
		"name": "Physician Invalid Address Rule"
		},
	"global": "invalidPhysicianAddressSettings"
},
{
    "description": "The Physician has been flagged in the system for having history of fraudulent activity",
    "name": "Physician Fraudulent History Rule",
    "script": " package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting physicanBadHistorySettings rule 'Physician Fraudulent History Rule' when Contact($ContactId : id, ConvictedFraudster__c == true); Cve__Claim__c ($ClaimId : id, RuleUtil.isClaimOpen(cve__Status__c)) Cve__ClaimRelationship__c( cve__Claim__c == $ClaimId, cve__Contact__c == $ContactId, cve__Type__c == 'Attending Physician', cve__Contact__c == $ContactId ) then  insert( new Alert(drools.getRule().getName(), physicanBadHistorySettings.getScore(), physicanBadHistorySettings.getRecommendation(), $ClaimId)); end ",
	"consequence": {"score":100, "recommendation":"Investigate the physician on record "},
	"setting":{
		"score":100, "recommendation":"Investigate the physician on record",
		"configHint": "",
		"category": "Physician",
		"name": "Physician Fraudulent History Rule"
		},
	"global": "invalidPhysicianAddressSettings"
},
{
    "description": "The Claimant Job type looks at claimants job titles and raises and alert if the claimant may have a job that would allow them to have the knowledge to commit fraud",
    "name": "Claimant Job Type Rule",
    "script": " package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting claimantJobTypeSettings rule 'Claimant Job Type Rule' when Contact($ContactId : id, RuleUtil.isJobSuspect(Title)); Cve__Claim__c($ClaimId : id, cve__ClaimantInsured__c == $ContactId, RuleUtil.isClaimOpen(cve__Status__c)); then insert( new Alert(drools.getRule().getName(), claimantJobTypeSettings.getScore(), claimantJobTypeSettings.getRecommendation(), $ClaimId )); end",
	"consequence": {"score":100, "recommendation":"Investigate the Claimants Knowledge of the industry"},
	"setting":{
		"score":100, 
		"recommendation":"Investigate the Claimants Knowledge of the industry",
		"configHint": "",
		"category": "Claimant",
		"name": "Claimant Job Type Rule"
		},
	"global": "claimantJobTypeSettings"
},
{
    "description": "The Subjective injury rule assesses the claimants medical condition to see if it is a subjective injury",
    "name": "Subjective Injury Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.* import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting subjectiveInjurySettings rule 'Subjective Injury Rule' when   Contact($ContactId : id); Cve__Claim__c($ClaimId : id, cve__ClaimantInsured__c == $ContactId);  Cve__Journal__c( $JournalId : id, cve__Claim__c == $ClaimId) Cve__Diagnosis__c(cve__Journal__c == $JournalId, $cve__MedicalCodeDescription__c : cve__MedicalCodeDescription__c) eval( RuleUtil.isSubjectiveInjury($cve__MedicalCodeDescription__c) ) then insert( new Alert(drools.getRule().getName(), subjectiveInjurySettings.getScore() , subjectiveInjurySettings.getRecommendation(), $ClaimId)); end;",
	"consequence": {"score":100, "recommendation":" Get Local Physicians opinion on this injury "},
	"setting":{
		"score":100, 
		"recommendation":" Get Local Physicians opinion on this injury ",
		"configHint": "",
		"category": "Diagnosis",
		"name": "Subjective Injury Rule"
		},
	"global": "subjectiveInjurySettings"
},
{
    "description": "This Rule Counts the number of Notes, Attachments and Documents and evaluates if the claims is getting complicated due to the large amount of Correspondence",
    "name": "Large Amount of Correspondence Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting largeAmountOfCorrespondanceSettings rule 'Large Amount of Correspondence Rule' when Cve__Claim__c($ClaimId : id);  Number( $noteCount : intValue) from accumulate( $notes :  Note(ParentId == $ClaimId), count( $notes ) ) Number( $attachmentCount : intValue) from accumulate( $attachments :  Attachment(ParentId == $ClaimId), count( $attachments ) )  Number( $documentCount : intValue) from accumulate( $documents :  Cve__Document__c(cve__Claim__c == $ClaimId), count( $documents ) ) eval(RuleUtil.isLargeNumberOfAttachmentsAndNotes($noteCount, $attachmentCount, $documentCount, largeAmountOfCorrespondanceSettings.getNumberOfCorrespondence())) then insert( new Alert(drools.getRule().getName(), largeAmountOfCorrespondanceSettings.getScore(), largeAmountOfCorrespondanceSettings.getRecommendation(), $ClaimId)); end;",
	"consequence": {"score":100, "recommendation":" Review Claim notes, attachments and documents to ensure Claim is not fraudulent"},
	"setting":{
		"score":100, 
		"recommendation": " Review Claim notes, attachments and documents to ensure Claim is not fraudulent", 
		"numberOfCorrespondence": 5,
		"configHint": "Please select the number of Correspondence documents you would consider to be suspicious",
		"category": "Claimant",
		"name": "Large Amount of Correspondence Rule"
		},
	"global": "largeAmountOfCorrespondanceSettings"
},
{
    "description": "This Rule flags claims have been claimed against relatively new Claims",
    "name": "New Policy Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting newPolicySettings rule 'New Policy Rule' when Contact($ContactId : id); Cve__Claim__c($ClaimId : id, Cve__ClaimantInsured__c == $ContactId, RuleUtil.isClaimOpen(cve__Status__c)); Cve__BenefitClaimed__c(cve__Claim__c == $ClaimId, $dateOfDisability : cve__DateOfDisability__c); Cve__PolicyRelationship__c(cve__Contact__c == $ContactId, cve__Start__c != null); Cve__PolicyRelationship__c(cve__Contact__c == $ContactId,  $policyStartDate : cve__Start__c); eval(RuleUtil.dayAfterStartDate($policyStartDate, $dateOfDisability, newPolicySettings.getNumberOfDays())) then insert( new Alert(drools.getRule().getName(), newPolicySettings.getScore(), newPolicySettings.getRecommendation(), $ClaimId)); end",
	"consequence": {"score":100, "recommendation":" Ensure claimant has a valid claim, this policy was recently purchased"},
	"setting":{
		"score":100, 
		"recommendation": " Ensure claimant has a valid claim, this policy was recently purchased", 
		"numberOfDays": 10,
		"configHint": "Please enter the number of days after a policy is purchased that would not be deemed suspicious if a claim was filed against it",
		"category": "Policy",
		"name": "New Policy Rule"
		},
	"global": "newPolicySettings"
},
{
    "description": "This rule searches for patterns in Diagnosis, Physician and SalesOffice to try uncover patterns of fraud",
    "name": "Physician and Sales Office with same Diagnosis Multiple times Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting sameDiagnosisForPhysicianSalesOfficeSettings rule 'Physician and Sales Office with same Diagnosis Multiple times Rule' when Contact($PhysicianId : id);  Cve__Claim__c($ClaimNumber : name ,$ClaimId : id, $PolicyId : cve__Policy__c, $ClaimantId : Cve__ClaimantInsured__c); Cve__ClaimRelationship__c( cve__Claim__c == $ClaimId, cve__Type__c == 'Attending Physician', cve__Contact__c == $PhysicianId  ) Contact(id == $ClaimantId);  Cve__Journal__c( $JournalId : id, cve__Claim__c == $ClaimId) Cve__Diagnosis__c(cve__Journal__c == $JournalId, $medicalCode : cve__MedicalCode__c, cve__MedicalCode__c != null) Cve__PolicyRelationship__c(cve__Contact__c == $ClaimantId, cve__Policy__c == $PolicyId);  Cve__Policy__c(id == $PolicyId, $salesOffice : cve__SalesOffice__c); not PhysicanDiagnosis(claimId == $ClaimId); then insert( new PhysicanDiagnosis($PhysicianId, $medicalCode, $ClaimId, $salesOffice)); end rule 'count Physician Diagnosis and Sales Office Rule' when Cve__Claim__c($ClaimId : id, $ClaimNumber : Name); PhysicanDiagnosis($PhysicianId : physicanId, $mediCode : medicalCode, claimId == $ClaimId, $salesOffice : salesOffice); ArrayList(size > sameDiagnosisForPhysicianSalesOfficeSettings.getNumberOfClaims()) from collect(  PhysicanDiagnosis(physicanId == $PhysicianId, medicalCode == $mediCode, salesOffice == $salesOffice) ) then  insert( new Alert('physician And Sales Office with same Diagnosis Multiple times', sameDiagnosisForPhysicianSalesOfficeSettings.getScore(), sameDiagnosisForPhysicianSalesOfficeSettings.getRecommendation(), $ClaimId)); end",
	"consequence": {"score":110, "recommendation" : "Investigate the pattern and association between the Physician and SalesOffice"},
	"setting":{
		"score":100, 
		"recommendation": "Investigate the pattern and association between the Physician and SalesOffice", 
		"numberOfClaims": 4,
		"configHint": "Please specify the number of claims that would be deemed suspicious if the claims where purchased in the same sales office and given the same diagnosis by the same Physician",
		"category": "Diagnosis",
		"name": "Physician and Sales Office with same Diagnosis Multiple times Rule"
		},
	"global": "sameDiagnosisForPhysicianSalesOfficeSettings"
},
{
    "description": "This rule searches for patterns in Diagnosis and SalesOffice to try uncover patterns of fraud",
    "name": "Sales Office with same Diagnosis Multiple times Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting sameDiagnosisForSalesOfficeSettings rule 'Sales Office with same Diagnosis Multiple times Rule' when Cve__Claim__c($ClaimNumber : name ,$ClaimId : id, $PolicyId : cve__Policy__c, $ClaimantId : Cve__ClaimantInsured__c); Contact(id == $ClaimantId); Cve__Journal__c( $JournalId : id, cve__Claim__c == $ClaimId)  Cve__Diagnosis__c(cve__Journal__c == $JournalId, $medicalCode : cve__MedicalCode__c, cve__MedicalCode__c != null)  Cve__PolicyRelationship__c(cve__Contact__c == $ClaimantId, cve__Policy__c == $PolicyId); Cve__Policy__c(id == $PolicyId, $salesOffice : cve__SalesOffice__c); not PhysicanDiagnosis(claimId == $ClaimId); then insert( new PhysicanDiagnosis(null, $medicalCode, $ClaimId, $salesOffice)); end rule 'count Diagnosis and Sales Office Rule' when  Cve__Claim__c($ClaimId : id, $ClaimNumber : Name); PhysicanDiagnosis($mediCode : medicalCode, claimId == $ClaimId, $salesOffice : salesOffice); ArrayList(size > sameDiagnosisForSalesOfficeSettings.getNumberOfClaims()) from collect(  PhysicanDiagnosis(medicalCode == $mediCode, salesOffice == $salesOffice) ) then insert( new Alert('Sales Office Multiple Claims with the same Diagnosis', sameDiagnosisForSalesOfficeSettings.getScore() ,sameDiagnosisForSalesOfficeSettings.getRecommendation() , $ClaimId)); end",
	"consequence": {"score":110, "recommendation" : "Investigate the pattern and associated with the Sales Office"},
	"setting":{
		"score":100, 
		"recommendation": "Investigate the pattern and associated with the Sales Office", 
		"numberOfClaims": 4,
		"configHint": "Please specify the number of claims that would be deemed suspicious if the claims where purchased in the same sales office and diagnosed by the same Physician",
		"category": "Diagnosis",
		"name": "Sales Office with same Diagnosis Multiple times Rule"
		},
	"global": "sameDiagnosisForSalesOfficeSettings"
},
{
    "description": "This rule searches for the amount of previous claims the Claimant has already made",
    "name": "Claimants Previous Claims Rule",
    "script": " package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting previousClaimsSettings rule 'Claimants Previous Claims Rule' when Contact($ContactId : id); Cve__Claim__c ($ClaimId : id, cve__ClaimantInsured__c == $ContactId , RuleUtil.isClaimOpen(cve__Status__c)) ArrayList($total : size > previousClaimsSettings.getNumberOfClaims()) from collect(Cve__Claim__c(cve__ClaimantInsured__c == $ContactId, cve__Status__c == 'Closed') ) then insert( new Alert(drools.getRule().getName(), previousClaimsSettings.getScore(), previousClaimsSettings.getRecommendation() , $ClaimId)); end ",
	"consequence": {"score":110, "recommendation" : "Review Previous claims for patterns"},
	"setting":{
		"score":100, 
		"recommendation": "Review Previous claims for patterns", 
		"numberOfClaims": 4,
		"configHint": "Please specify the number of previous claims the claimant would have to have claimed before be deemed suspicious",
		"category": "Claimant",
		"name": "Claimants Previous Claims Rule"
		},
	"global": "previousClaimsSettings"
},
{
    "description": "This rule searches for the amount of previous claims the Claimant has already made and checks if they have claimed the for the same injury",
    "name": "Claimant Claiming Same Injury Number Of Times Rule",
    "script": "package com.rules import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting previousClaimsWithSameInjurySettings rule 'Claimant Claiming Same Injury Number Of Times Rule' salience 100 when Cve__Claim__c($closedClaimName : name, $ClosedClaimId : id, $ContactId : cve__ClaimantInsured__c, cve__Status__c == 'Closed'); Cve__Journal__c( $ClosedJournalId : id, cve__Claim__c == $ClosedClaimId)  Cve__Diagnosis__c(cve__Journal__c == $ClosedJournalId, $MedicalCode : cve__MedicalCode__c, cve__MedicalCode__c != null) not ClaimantSameInjuryHistory(closedClaimId == $ClosedClaimId); then insert( new ClaimantSameInjuryHistory($ContactId, $ClosedClaimId , $MedicalCode)); end rule 'count Claimant Same Injury History' salience 0 when ClaimantSameInjuryHistory($ClaimantInsured : contactId , $medicalCode : medicalCode); Cve__Claim__c($OpenClaimId : id, $ClaimNumber : Name, cve__ClaimantInsured__c == $ClaimantInsured , RuleUtil.isClaimOpen(cve__Status__c));   Cve__Journal__c( $JournalId : id, cve__Claim__c == $OpenClaimId) Cve__Diagnosis__c(cve__Journal__c == $JournalId, cve__MedicalCode__c == $medicalCode, cve__MedicalCode__c != null)  Number( $claimCount : intValue) from accumulate( $claims :  ClaimantSameInjuryHistory($ClaimantInsured == contactId, medicalCode == $medicalCode), count( $claims )) eval( $claimCount > previousClaimsWithSameInjurySettings.getNumberOfClaims()) not CountedSameInjury( claimantId == $ClaimantInsured) then insert( new Alert(drools.getRule().getName(), previousClaimsWithSameInjurySettings.getScore(), previousClaimsWithSameInjurySettings.getRecommendation(), $OpenClaimId)); insert( new CountedSameInjury($ClaimantInsured)); end",
	"consequence": {"score":110, "recommendation" : "Review Previous claims for patterns"},
	"setting":{
		"score":100, 
		"recommendation": "Review Previous claims for patterns", 
		"numberOfClaims": 3,
		"configHint": "Please specify the number of previous claims the claimant with the same diagnosis would have to have claimed before be deemed suspicious",
		"category": "Diagnosis",
		"name": "Claimant Claiming Same Injury Number Of Times Rule"
		},
	"global": "previousClaimsWithSameInjurySettings"
},
{
    "description": "This rule searches for the amount of previous diagnosis made by a physicians and flags open claims that have been found in this pattern",
    "name": "Physician Diagnosing Same Injury Rule",
    "script": "package com.rules  import com.claimvantage.model.* import com.sforce.soap.enterprise.sobject.*  import com.claimvantage.rules.* import java.io.PrintStream global com.claimvantage.rules.Setting physicianDiagnosingSameInjurySettings rule 'Physician Diagnosing Same Injury Rule' salience 100 when Contact($PhysicianId : id); Cve__Claim__c($ClaimId : id );  Cve__ClaimRelationship__c( cve__Claim__c == $ClaimId, cve__Type__c == 'Attending Physician', cve__Contact__c == $PhysicianId)Cve__Journal__c( $JournalId : id, cve__Claim__c == $ClaimId)  Cve__Diagnosis__c(cve__Journal__c == $JournalId, $medicalCode : cve__MedicalCode__c, cve__MedicalCode__c != null ) not PhysicanDiagnosis(claimId == $ClaimId); then insert( new PhysicanDiagnosis($PhysicianId, $medicalCode, $ClaimId)); end rule 'Count Physician Multiple Diagnosis' salience 0 when $Physician : PhysicanDiagnosis($PhysicianId : physicanId, $mediCode : medicalCode, $ClaimId : claimId); Cve__Claim__c( id == $ClaimId, RuleUtil.isClaimOpen(cve__Status__c)); Number( $diagnosisCount : intValue) from accumulate( $claims :  PhysicanDiagnosis(physicanId == $PhysicianId, medicalCode == $mediCode),count( $claims )) eval( $diagnosisCount > physicianDiagnosingSameInjurySettings.getNumberOfClaims()) then insert( new Alert(drools.getRule().getName(), physicianDiagnosingSameInjurySettings.getScore(), physicianDiagnosingSameInjurySettings.getRecommendation(), $ClaimId)); end",
	"consequence": {"score":110, "recommendation" : "Review Physician for patterns"},
	"setting":{
		"score":100, 
		"recommendation": "Review Physician for patterns", 
		"numberOfClaims": 3,
		"configHint": "Please specify the number of previous claims diagnosed by the same physician with the same diagnosis would have to have claimed before be deemed suspicious",
		"category": "Physician",
		"name": "Physician Diagnosing Same Injury Rule"
		},
	"global": "physicianDiagnosingSameInjurySettings"
}]